

if((Now - lastCheckTime) > 50){

    lastCheckTime = Now;
    
    foreach(Score in Scores){
        declare <?php echo $this->varName ?> for Score.User = -1;

        if((<?php echo $this->varName ?> == -1 || <?php echo $this->varName ?> > Score.BestLap.Time) && Score.BestLap.Time > 0){


            //This player start's to be interesting.
            <?php echo $this->varName ?> = Score.BestLap.Time;
            declare time = Score.BestLap.Time;

            declare playerTime = -1;

            if (!playerTimes.existskey(Score.User.Login)) {
                playerNickName[Score.User.Login] = Score.User.Name;
            }else{
                playerTime =  playerTimes[Score.User.Login];
            }

            if (playerTime == -1 || playerTime > time) {
                //Dedimania situation need to check record fits
                if (useMaxPlayerRank) {
                    origPlayerTimes.clear();
                    origPlayerTimes = playerTimes;

                    //Add new time that might be removed
                    playerTimes[Score.User.Login] = time;

                    //sort times
                    playerTimes = playerTimes.sort();

                    //get max rank
                    declare maxRank = maxServerRank;
                    if (maxPlayerRank.existskey(Score.User.Login) && maxPlayerRank[Score.User.Login] > maxRank) {
                        maxRank = maxPlayerRank[Score.User.Login];
                    }

                    declare Boolean keepRecord = False;
                    declare Integer inRank = 1;

                    //Check if player ew rank is nice to go
                    foreach (Login => Time in playerTimes) {
                        if (Login == Score.User.Login) {
                            //It's our player
                            if(inRank <= maxRank){
                                log("Dedimania Record not to be ignored");
                                keepRecord = True;
                            }
                        }
                        inRank += 1;
                    }

                    if(!keepRecord){
                        playerTimes.clear();
                        playerTimes = origPlayerTimes;
                    }
                }else{
                    //Normal situation all times are taken in account
                    playerTimes[Score.User.Login] = time;
                }

                needUpdate = True;
            }else{
                <?php echo $this->varName ?> = playerTime;
            }

        }
    }
}


if(!needUpdate){
    lastUpdateTime = Now;
}

if (needUpdate && (((Now - lastUpdateTime) > 500 && exp_widgetVisibleBuffered && exp_widgetLayersBuffered == activeLayer) || exp_widgetVisibilityChanged)) {
    lastUpdateTime = Now;

    needUpdate = False;
    declare i = 1;
    declare nbRec = 1;
    declare showed = False;

    declare myRank = -1;
    declare start = -1;
    declare end = -1;
    declare recCount = -1;

    if (playerTimes.count > nbShow) {
	recCount = nbShow;
    } else {
	recCount = playerTimes.count;
    }

    i = 1;

    foreach (Login => Score in playerTimes) {
	if (LocalUser != Null) {
	    if (Login == LocalUser.Login) {
		myRank = i;
		break;
	    }
	}
	i += 1;
    }

    if (myRank != -1) {
	start = myRank - ((nbFields - nbFirstFields) / 2);

	if (start <= nbFirstFields) {
	    start = nbFirstFields;
	    end = start + (nbFields - nbFirstFields);
	} else {
	    end = start + (nbFields - nbFirstFields);
	    if (end > recCount) {
		end = recCount;
		start = end - (nbFields - nbFirstFields);
	    }
	}
    } else {
	start = recCount  - (nbFields - nbFirstFields);
	end = start + (nbFields - nbFirstFields);
    }

    i = 1;
    nbRec = 1;
    foreach (Login => Score in playerTimes) {

	if ((nbRec <= nbFirstFields || (nbRec > start && nbRec <= end) ) && nbRec <= nbShow && i <= nbFields) {

	    declare nickLabel = (Page.GetFirstChild("RecNick_"^i) as CMlLabel);
	    declare timeLabel = (Page.GetFirstChild("RecTime_"^i) as CMlLabel);
	    declare highliteQuad = (Page.GetFirstChild("RecBg_"^i) as CMlQuad);

	    if (highliteQuad != Null) {
		if (playersOnServer.existskey(Login) && i != myRank) {
		    highliteQuad.Show();
		} else {
		    highliteQuad.Hide();
		}
	    }

	    if (nickLabel != Null) {
		putRecordTo(i, nbRec, Score, Login, playerNickName[Login], Login == LocalUser.Login);
		if (Login == LocalUser.Login) {
		    showed = True;
		}
	    }
	    i += 1;
	}
	nbRec += 1;

	if (nbRec > nbShow) {
	    
	}
    }
    recordLogin = "";
}

foreach (Event in PendingEvents) {
    /*if (Event.Type == CXmlRpcEvent::Type::LibXmlRpc_OnWayPoint) {
	
    }*/
    
    if (Event.Type == CMlEvent::Type::MouseClick && Event.ControlId == "setLayer") {
	if (eXp_widgetLayers[version][id][gameMode] == "normal") {	    
	    eXp_widgetLayers[version][id][gameMode] = "scorestable";	    
	    exp_needToCheckPersistentVars = True;
	} else {	   
	    eXp_widgetLayers[version][id][gameMode] = "normal";
	    exp_needToCheckPersistentVars = True;
	    
	}
    }
}