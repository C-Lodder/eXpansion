<?php

$startPosX = (-1 * intval($win->getSizeX() / 2)) . ".0";
$startPosY = intval($win->getSizeY() / 2) . ".0";

?>


<script><!--
#Include "MathLib" as MathLib
#Include "TextLib" as TextLib

// do not remvove, this is for animation and draggable libraries
#Include "MathLib" as ML
#Include "TextLib" as TL

//Function definitions
<?php echo $this->scriptLib ?>
    
Void stackActivateWindow(Text window) {
    declare Text[] exp_windowStack for UI = Text[];  
    declare Boolean exp_updateStack for UI;
    declare Integer exp_stackCounter for UI;

    declare Text[] outArray = Text[];
     
    outArray.add(window);
    
    foreach (value in exp_windowStack) {
	if (value != window) {
	    outArray.add(value);
	}	
    }
    exp_windowStack = outArray;    
    exp_updateStack = True;
    exp_stackCounter = Now;   
}

Void stackRemoveWindow(Text window) {
    declare Text[] exp_windowStack for UI = Text[];
    declare Boolean exp_updateStack for UI;
    declare Integer exp_stackCounter for UI;
    
    declare Text[] outArray = Text[];
    
    foreach (key => value in exp_windowStack) {
	if (value != window) {
	    outArray.add(value);
	}
    }
    exp_windowStack = outArray;
    exp_updateStack = True;   
    exp_stackCounter = Now;    
}

//Main Function
main () {
    declare Integer closeCounter = 0;
    declare Boolean mouseButton for Page;
    
    declare Window <=> Page.GetFirstChild("<?php echo $win->getId() ?>");   

    declare windowFrame <=> Page.GetFirstChild("windowFrame");
    declare CMlLabel TitlebarText <=> (Page.GetFirstChild("TitlebarText") as CMlLabel);    

    declare MoveWindow = False;
    declare Scroll = False;
    declare closeWindow = False;
    declare Text closeAction = "<?php echo $this->closeAction; ?>";
    
    declare openWindow = False;
    
    declare isMinimized = False;
    
    declare Boolean active = False; 
    
    declare Vec3 LastDelta = <Window.RelativePosition.X, Window.RelativePosition.Y, 0.0>;
    declare Vec3 DeltaPos = <0.0, 0.0, 0.0>;
    declare Vec2 Offset = <0., 0.>;
    
    declare Text windowId = "<?php echo $win->getId() ?>";
    
    declare Text id = "<?php echo $this->name ?>";
    declare Boolean forceReset = <?php echo $this->forceReset; ?>;
    declare Text version = "<?php echo $this->version; ?>";
    declare Boolean disableAnimations = <?php echo $this->disableAnimations; ?>;
    
    declare persistent Vec3[Text][Text] exp_windowLastPosRel;
    declare Text[] exp_windowStack for UI = Text[];
    declare Boolean exp_updateStack for UI = False;
    declare Integer exp_stackCounter for UI = 0;
    declare Text exp_window = "";
    declare Real zIndex = 0.;
    
    stackActivateWindow(id);
    
    //Declarations by containers included in this window
    <?php echo $this->dDeclares ?>
	
    if (!exp_windowLastPosRel.existskey(version)) {
         exp_windowLastPosRel[version] = Vec3[Text];
    }
    
    if ( !exp_windowLastPosRel[version].existskey(id) || forceReset) {
        exp_windowLastPosRel[version][id] = < <?php echo $startPosX ?>, <?php echo  $startPosY ?>, 0.0>;
    }
    
    LastDelta = exp_windowLastPosRel[version][id];
    Window.RelativePosition = exp_windowLastPosRel[version][id];
    
    //if (!disableAnimations) {
    //    Window.RelativePosition.X = 0.;
    //    Window.RelativePosition.Y = 0.;
    //    Window.Scale = 0.0;
    //    openWindow = True;
    //}
    

    while(True) {
	yield;
	
        <?php echo $this->wLoop ?>

        if (openWindow) {
            openWindow = False;
            declare Real winX = exp_windowLastPosRel[version][id].X;
            declare Real winY = exp_windowLastPosRel[version][id].Y;
            declare Text pos = winX ^ " " ^ winY;
            LibManialink_Anim("<frame posn=\"" ^ pos ^ "\" scale=\"1\" id=\"" ^ windowId ^ "\" />", 250, "EaseInLinear");
        }	

	if (closeWindow && closeCounter + 350 <= Now ) {	    
	    stackRemoveWindow(id);
	    TriggerPageAction(closeAction);
	    closeWindow = False;	    
	    continue;
	}
	
	if (exp_updateStack == True) {
	    foreach (key => value in exp_windowStack) {		
		if (id == value) {
		 Window.RelativePosition.Z = zIndex - (5*key);		 		 
		}
	    }	    
	    
	    if (exp_stackCounter + 100 <= Now) {
		exp_updateStack = False;
	    }	    
	}
	    
	
        if (MoveWindow) {                        
             Window.RelativePosition.X = MouseX + Offset.X;
	     Window.RelativePosition.Y = MouseY + Offset.Y;	     
	     exp_windowLastPosRel[version][id] = Window.RelativePosition;            
	}
	 
	
	
        if (PendingEvents.count != 0) { 
	    foreach (Event in PendingEvents) {                
		
		if (Event.Type == CMlEvent::Type::MouseClick && Event.ControlId == "Close") {
		    if (disableAnimations) {
			TriggerPageAction(closeAction);
			stackRemoveWindow(id);
			continue;
		    } else {
		    declare Real winX = Window.RelativePosition.X + <?php echo $win->getSizeX()/2; ?>; 
                   declare Real winY = Window.RelativePosition.Y;
                    //declare Real winX = 0.;
		    //declare Real winY = 0.;
		    declare Text pos = winX ^ " " ^ winY;
		    LibManialink_Anim("<frame posn=\"" ^ pos ^ "\" scale=\"0\" id=\"" ^ windowId ^ "\" />", 250, "EaseOutLinear");
                    closeWindow = True;
		    closeCounter = Now;	  	
		    }
                }
                if (Event.Type == CMlEvent::Type::MouseClick && ( Event.ControlId == "MainWindow" || Event.ControlId == "Titlebar" ) ) {            
                    stackActivateWindow(id);
                }		
	    }
	}
	
	if (exp_windowStack.count == 0) {
	    exp_window = "";
	} else {
	    exp_window = exp_windowStack[0];
	}
	
	if (MouseLeftButton == True && exp_window == id) {	
		foreach (Event in PendingEvents) {
		    if (Event.Type == CMlEvent::Type::MouseClick && Event.ControlId == "Titlebar")  {
			stackActivateWindow(id);
			Offset = <Window.RelativePosition.X - MouseX, Window.RelativePosition.Y - MouseY>;
			MoveWindow = True;
		     }		                 
		}
	     } else {
	     MoveWindow = False; 	 
	    }

	}
	
}  //end of window
--></script>