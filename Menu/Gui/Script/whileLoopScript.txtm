if( eXp_tabPressed == True && (Now - eXp_tabTime) > 50) {
    eXp_tabPressed = False;
}

foreach (Event in PendingEvents) {
    if (Event.Type == CMlEvent::Type::KeyPress && Event.KeyCode == 123)  {
        eXp_tabTime = Now;
        eXp_tabPressed = True;
    }
    if (Event.Type == CMlEvent::Type::KeyPress  && Event.KeyCode == 48) {
        exp_chatVisible = !exp_chatVisible;
        ClientUI.OverlayHideChat = !exp_chatVisible;
    }

    /*if (Event.Type == CMlEvent::Type::MouseOver && Event.ControlId == "boundingBox") {
        canToggle = True;
    }

    if (Event.Type == CMlEvent::Type::MouseOut && Event.ControlId == "boundingBox") {
       canToggle = False;
    } */
}

if(eXp_tabPressed) {
    toggleSubmenu = False;
    Menu.Hide();
    if(showStatus){
        needUpdate = True;
        showStatus = False;
    }
} else if (canToggle) {
        if(MouseRightButton && !eXp_mouseRightState && !eXp_tabPressed) {
                eXp_mouseRightTime = Now;
                eXp_mouseRightState = True;
                toggleSubmenu = False;
                lastMousePos = <MouseX, MouseY>;
            } else if(!MouseRightButton && eXp_mouseRightState) {
            eXp_mouseRightState = False;
            toggleSubmenu = False;
            if((Now - eXp_mouseRightTime) < 500) {
                    if (lastMousePos.X == MouseX && lastMousePos.Y == MouseY) {
                        toggleSubmenu = True;
                        showStatus = True;
                        needUpdate = True;
                        Menu.RelativePosition.X = MouseX-1.0;
                        Menu.RelativePosition.Y = MouseY+.5;
                        Menu.RelativePosition.Z = 50.0;
                    }

            } else {
                needUpdate = True;
                showStatus = False;
            }
        }
}

if (MouseMiddleButton && !eXp_mouseMiddleState) {
	eXp_mouseMiddleTime = Now;
	eXp_mouseMiddleState = True;
} else if(!MouseMiddleButton && eXp_mouseMiddleState) {
    eXp_mouseMiddleState = False;

	if((Now - eXp_mouseMiddleTime) < 200) {
	    exp_enableHudMove = !exp_enableHudMove;
	    exp_needToCheckPersistentVars = True;
	    }
}

/*
if (IsSpectatorMode) {
    toggleSubmenu = False;
}
*/
if(eXp_tabPressed){
    toggleSubmenu = False;
}

if (toggleSubmenu) {
	foreach (Event in PendingEvents) {
            if (Event.Type == CMlEvent::Type::MouseOver) {
                if ( Event.Control.ControlClasses.count > 0) {
                    if (Event.Control.ControlClasses[0] == "group") {

                        if (lastItem != Event.Control.DataAttributeGet("label") ) {
                            hideSubMenu();
                            lastItem = Event.Control.DataAttributeGet("label");
                         }
                        declare subFrame = (Page.GetFirstChild(Event.Control.DataAttributeGet("label")) as CMlFrame);
                        Page.GetClassChildren("sub" , subFrame , True);
                        foreach (control in Page.GetClassChildren_Result) {
                            declare lbl = (control as CMlLabel);
                            lbl.Show();
                        }
                    }

                    if (Event.Control.ControlClasses[0] == "menu") {
                        hideSubMenu();
                    }

                    lastItem = Event.Control.DataAttributeGet("label");
                }

                if (Event.Control.ControlClasses.count == 0) {
                    hideSubMenu();
                }
            }
    }
}

if (needUpdate) {
    needUpdate = False;

    if (showStatus) {
        Menu.Show();
         outText = "";
                foreach (idd => dump in eXp_widgetVisible[version]) {
                    if (!eXp_widgetVisible[version][idd].existskey(gameMode)) {
                        continue;
                    }
                        declare status = eXp_widgetVisible[version][idd][gameMode];
                        declare Text bool = "0";
                        if (status == True) {
                                bool = "1";
                            }
                            outText = outText ^ idd ^ ":" ^ gameMode ^ ":" ^ bool ^ "|";

                    }
                    // log(outText);
                    widgetStatus.Value = outText;
                    needHidden = True;

    } else {
        if (needHidden) {
            hideStamp = Now;
            needHidden = False;
            toggleSubmenu = False;
            Menu.Hide();
           }
    }
}

if(!toggleSubmenu && Menu.Visible && (Now - hideStamp) > 300) {
    Menu.Hide();
}

if (MouseLeftButton || (canToggle == False && MouseRightButton)) {
         showStatus = False;
         needUpdate = True;
}

